<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
     
    <context:property-placeholder location="classpath:jdbc.properties,classpath:localconfig.properties" />
    
	<!-- 使得@Autowire能够使用,spring自带的注解 -->
	<!-- <context:annotation-config /> -->
	
	<!-- 扫描类包，将标注Spring注解的dao,bo类以及其它控件类自动转化Bean，同时完成Bean的注入 -->
	<context:component-scan base-package="
	com.linkage.contacts.server.dao
	,com.linkage.contacts.server.bo
	" />
	
	<!-- dbcp连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="10" />
		<property name="maxActive" value="30" />
		<property name="maxIdle" value="8" />
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="true" />
	</bean>
	
	<!-- Mybatis  sqlSessionFactory的配置-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
		<property name="dataSource" ref="dataSource" />
		<!-- 加载Mybatis配置文件 -->
		<property name="configLocation" value="classpath:test-mybatis-config.xml" />
		 <property name="typeAliasesPackage" value="com.linkage.contacts.server.entity" />
	</bean>
	<!-- Mybatis  sqlSessionTemplate的配置-->
	<!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"> 
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean> -->
	<!-- 自动扫描 com.linkage.contacts.server.mybatis.persistence 包下的所有与映射文件对应的映射接口并装载到spring容器中 -->
  	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.linkage.contacts.server.mybatis.persistence" />
    </bean>
    
    <!-- JDBC模板 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 用注解来实现事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
		
	<!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
	<bean class="com.linkage.core.SpringContextHolder" lazy-init="false" />
   
</beans>
