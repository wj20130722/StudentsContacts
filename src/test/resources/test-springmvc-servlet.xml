<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util 
		http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd">
	<!-- 读取配置文件 -->	
	<context:property-placeholder location="classpath:localconfig.properties" />
	
	<!-- spring-mvc-全局的拦截器 -->
	<!-- <mvc:interceptors>
		对request请求(除了登录页面请求,异常处理页面请求)需要做token验证
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/user"/>
			<mvc:exclude-mapping path="/authorizations"/>
			<mvc:exclude-mapping path="/user/*"/>
			<mvc:exclude-mapping path="/error/*"/>
			<bean class="com.xwtech.cpmis.server.spring.mvc.custom.intercepor.AuthorizationValidationIntercepor"/>
		</mvc:interceptor> 
	
	</mvc:interceptors>-->
		
	<!-- 扫描类包，将标注Spring注解的controller类自动转化Bean，同时完成Bean的注入 -->
	<context:component-scan base-package="com.linkage.contacts.server.core.controller" />
		
	<!--Spring3.2开始的注解 HandlerMapping -->
	<!-- <bean id="handlerMapping"
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" /> -->

	<!--Spring3.2开始的注解 HandlerAdapter -->
	<!-- <bean id="handlerAdapter"
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		线程安全的访问session
		<property name="synchronizeOnSession" value="true" />
		<property name="messageConverters">
			<util:list id="beanList">
				 <ref bean="byteArrayHttpMessageConverter"/>
				<ref bean="stringHttpMessageConverter"/>
				<ref bean="resourceHttpMessageConverter"/>
				<ref bean="formHttpMessageConverter"/>
				<ref bean="mappingJacksonHttpMessageConverter" />
				
			</util:list>
		</property>
		自定义参数解析器
		<property name="customArgumentResolvers">
			<util:list id="resolverbeanList">
				支持@RequestAttribute注解参数的绑定
				<bean class="com.linkage.contacts.server.spring.mvc.custom.resolver.RequestAttributeMethodArgumentResolver"/>
			</util:list>
		</property>
	</bean> -->
	
	
	<bean id="multipartResolver"
class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
<!-- one of the properties available; the maximum file size in bytes -->
<property name="defaultEncoding" value="UTF-8"/>
<property name="maxUploadSize" value="100000000"/>
</bean>

	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<!-- 先不配置，采用默认配置 -->
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property> 
	</bean>
	<!-- 
	<bean id="byteArrayHttpMessageConverter" class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
	
	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">  
          <property name="supportedMediaTypes">  
              <list>
              	  <value>text/plain;charset=UTF-8</value>
                  <value>text/html;charset=UTF-8</value>
                  <value>application/json;charset=UTF-8</value>  
              </list>  
          </property>  
    </bean>
    
    <bean id="resourceHttpMessageConverter" class="org.springframework.http.converter.ResourceHttpMessageConverter"/>
    
    <bean id="formHttpMessageConverter" class="org.springframework.http.converter.FormHttpMessageConverter" >
	     <property name="supportedMediaTypes">  
	              <list>
	                  <value>application/x-www-form-urlencoded;charset=UTF-8</value>
	              </list>  
	      </property>
    </bean>  -->


	<mvc:annotation-driven >
		<mvc:argument-resolvers>
			<bean class="com.linkage.contacts.server.spring.mvc.custom.resolver.RequestAttributeMethodArgumentResolver"/>
		</mvc:argument-resolvers>
		<mvc:async-support default-timeout="3000">
			<mvc:callable-interceptors>
				<bean class="org.linkage.contacts.server.spring.mvc.async.TimeoutCallableProcessingInterceptor" />
			</mvc:callable-interceptors>
		</mvc:async-support>
	</mvc:annotation-driven>

	<!-- 总错误处理 -->
	<!-- http://blog.teamextension.com/ajax-friendly-simplemappingexceptionresolver-1057 -->
	 <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
    <property name="exceptionMappings">
        <props>
        	<!-- 认证失败异常处理 -->
            <prop key="com.linkage.contacts.core.exception.ContactException">forward:/contactsapi/error/notauthorization</prop>
            <!-- 系统内部异常处理 -->
            <prop key="com.linkage.contacts.core.exception.InternalException">forward:/contactsapi/error/innerexception</prop>
        </props>
        
    </property>
    <property name="statusCodes">
    	<props>
    	<prop key="forward:/contactsapi/error/notauthorization">401</prop>
    	<prop key="forward:/contactsapi/error/innerexception">500</prop>
    	</props>
    </property>
    <!-- 默认异常处理的controller -->
    <property name="defaultErrorView" value="forward:/contactsapi/error/innerexception" /> 
    <!-- 默认HTTP的状态码 -->
    <property name="defaultStatusCode" value="500" />
	</bean>
		

</beans>
